//: [Previous](@previous)

import Foundation

/*
 引用类型:
     引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝。因此，引用的是已存在的实例本身而不是其拷贝
 
 值类型:
     它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制
 */

/*
 Swift 中类和结构体有很多共同点
     定义属性用于存储值
     定义方法用于提供功能
     定义下标操作使得可以通过下标语法来访问实例所包含的值
     定义构造器用于生成初始化值
     通过扩展以增加默认实现的功能
     实现协议以提供某种标准功能
 
 */

/*
 与结构体相比，类还有如下的附加功能
     继承允许一个类继承另一个类的特征
     类型转换允许在运行时检查和解释一个类实例的类型
     析构器允许一个类实例释放任何其所被分配的资源
     引用计数允许对一个类的多次引用
 */

struct SomeStructure {
    // 在这里定义结构体
}

class SomeClass {
    var id: Int!
    
}




//: [Next](@next)
